document.addEventListener("DOMContentLoaded", function() {
  initializeAgeDropdown();
  ageweightselect();
});
document.getElementById("clearbutton").addEventListener("click", clearCalc);

document.querySelectorAll('input[type="radio"]').forEach(function(radio) {
  radio.addEventListener('click', ageweightselect);
});

// Constants for better maintainability
const AGE_WEIGHT_DATA = {
  0: 3.5,
  0.5: 7,
  1: 10,
  2: 12,
  3: 14,
  4: 16,
  5: 18,
  6: 25,
  7: 28,
  8: 31,
  9: 34,
  10: 37,
  11: 40,
  12: 43,
  13: 46,
  14: 49,
  15: 52
};

const MEDICATION_FUNCTIONS = {
  calculate: ['calcResus', 'calcObservations', 'calcAdrenaline', 'calcAmiodarone', 'calcAtropine', 'calcCalcium', 'calcCefazolin', 'calcDroperidol', 'calcFentanyl', 'calcGlucose', 'calcKetamine', 'calcMetaraminol', 'calcMidazolam', 'calcMorphine', 'calcMorphineMidazolam', 'calcOndansetron', 'calcOlanzapine', 'calcNaloxone', 'calcParacetamol', 'calcPrednisolone', 'calcRocuronium', 'calcSaline', 'calcSodiumBicarbonate', 'calcSuxamethonium', 'calcTXA'],
  clear: ['clearResus', 'clearObservations', 'clearParameters', 'clearAdrenaline', 'clearAmiodarone', 'clearAtropine', 'clearCalcium', 'clearCefazolin', 'clearDroperidol', 'clearFentanyl', 'clearGlucose', 'clearKetamine', 'clearMetaraminol', 'clearMidazolam', 'clearMorphine', 'clearMorphineMidazolam', 'clearOndansetron', 'clearOlanzapine', 'clearNaloxone', 'clearParacetamol', 'clearPrednisolone', 'clearRocuronium', 'clearSaline', 'clearSodiumBicarbonate', 'clearSuxamethonium', 'clearTXA']
};

const WEIGHT_THRESHOLDS = {
  NEWBORN_MAX: 4,
  PAEDIATRIC_MAX: 52,
  ADULT_MIN: 50
};

// Initialize age dropdown with missing ages
function initializeAgeDropdown() {
  const ageSelect = document.getElementById("agechoice");
  if (!ageSelect) return;
  
  const agesToAdd = [
    { value: "12", text: "12 years" },
    { value: "13", text: "13 years" },
    { value: "14", text: "14 years" },
    { value: "15", text: "15 years" }
  ];
  
  agesToAdd.forEach(ageData => {
    // Check if option already exists
    const existingOption = Array.from(ageSelect.options).find(option => option.value === ageData.value);
    
    if (!existingOption) {
      const newOption = document.createElement("option");
      newOption.value = ageData.value;
      newOption.textContent = ageData.text;
      ageSelect.appendChild(newOption);
      console.log(`Added age option: ${ageData.text}`);
    }
  });
}

function ageweightselect() {
  const elements = {
    ageslct: document.getElementById("agebutton"),
    wtslct: document.getElementById("weightbutton"),
    agerow: document.getElementById("age-row"),
    weightrow: document.getElementById("weight-row")
  };
  
  const radioStates = {
    adultChecked: document.getElementById('adult1').checked,
    paedChecked: document.getElementById('paed1').checked,
    weightChecked: document.getElementById('weight1').checked,
    ageChecked: document.getElementById('age1').checked
  };
  
  // Update UI based on radio button states
  elements.ageslct.style.display = radioStates.adultChecked ? "none" : "revert";
  
  // Show/hide weight controls based on adult/paed selection
  elements.weightrow.style.display = radioStates.paedChecked ? "none" : "revert";
  elements.wtslct.style.display = radioStates.paedChecked ? "none" : "revert";
  
  // Show/hide age and weight rows based on selection
  elements.agerow.style.display = radioStates.ageChecked ? "contents" : "none";
  elements.weightrow.style.display = radioStates.weightChecked ? "contents" : "none";
  
  // Handle mode-specific logic
  if (radioStates.paedChecked) {
    // Paediatric mode: force age selection and hide weight controls
    document.getElementById('age1').checked = true;
    elements.agerow.style.display = "contents";
    elements.weightrow.style.display = "none";
  } else if (radioStates.adultChecked) {
    // Adult mode: default to weight selection and show weight controls
    if (!radioStates.ageChecked && !radioStates.weightChecked) {
      document.getElementById('weight1').checked = true;
      elements.weightrow.style.display = "contents";
    }
    elements.wtslct.style.display = "revert";
  }
}

document.getElementById("agechoice").addEventListener("change", function() {
  document.getElementById("WInputType").innerHTML = "Ideal Body ";
  agecalc();
});

document.getElementById("weightsubmit").addEventListener("click", function() {
  document.getElementById("WInputType").innerHTML = "Entered ";
  document.getElementById("agechoice").value = '';
  weightcalc();
});

function agecalc() {
  // Clear existing patient data
  clearPatientData();
  
  const age = parseFloat(document.getElementById("agechoice").value);
  
  if (isNaN(age)) {
    console.error("Invalid age selected");
    return;
  }
  
  document.getElementById('weightinput').value = '';
  
  // Calculate ideal body weight based on age
  const ageweight = AGE_WEIGHT_DATA[age] || (age + 4) * 2;
  const weight = parseFloat(ageweight.toFixed(2));
  
  // Determine patient mode based on weight
  const patientMode = weight <= WEIGHT_THRESHOLDS.NEWBORN_MAX ? "Newborn" : "Paediatric";
  
  // Store patient data
  sessionStorage.setItem("patientmode", patientMode);
  sessionStorage.setItem("patientweight", weight);
  
  displayParameters();
  runCalc();
}

function weightcalc() {
  clearPatientData();
  
  const weightInput = document.getElementById('weightinput');
  const weightValue = parseFloat(weightInput.value);
  
  if (!isValidWeight(weightValue)) {
    showWeightError();
    weightInput.value = '';
    clearParameters();
    return;
  }
  
  // Check which mode user has selected and respect it
  const isAdultSelected = document.getElementById('adult1').checked;
  const isPaedSelected = document.getElementById('paed1').checked;
  
  if (isPaedSelected) {
    // User selected paediatric - any weight goes to paediatric
    handlePaediatricWeight(weightValue);
  } else if (isAdultSelected) {
    // User selected adult - any weight stays adult (including lightweight patients)
    handleAdultWeight(weightValue);
  } else {
    // Fallback - shouldn't happen but handle gracefully
    if (weightValue < WEIGHT_THRESHOLDS.ADULT_MIN) {
      handlePaediatricWeight(weightValue);
    } else {
      handleAdultWeight(weightValue);
    }
  }
}

function isValidWeight(weight) {
  return !isNaN(weight) && weight > 0;
}

function showWeightError() {
  alert("Please enter a valid weight.");
}

function handlePaediatricWeight(weight) {
  sessionStorage.setItem("patientmode", "Paediatric");
  sessionStorage.setItem('patientweight', weight);
  
  // Don't force radio button changes - user already selected paediatric
  document.getElementById('agebutton').style.display = "revert";
  
  displayParameters();
  runCalc();
}

function handleAdultWeight(weight) {
  showGeriatricModal().then(() => {
    sessionStorage.setItem("patientmode", "Adult");
    sessionStorage.setItem('patientweight', weight);
    
    // Don't force radio button changes - user already selected adult
    document.getElementById('agebutton').style.display = "none";
    
    displayParameters();
    runCalc();
  });
}

function showGeriatricModal() {
  return new Promise((resolve) => {
    const modal = createGeriatricModal(resolve);
    document.body.appendChild(modal);
  });
}

function createGeriatricModal(resolveCallback) {
  const modal = document.createElement("div");
  modal.classList.add("dboxModal");
  
  const message = document.createElement("h2");
  message.textContent = "Is the patient older than 70 years old or frail?";
  modal.appendChild(message);
  
  const yesButton = createModalButton("Yes", () => {
    sessionStorage.setItem("patientgeriatric", "true");
    modal.remove();
    resolveCallback();
  });
  
  const noButton = createModalButton("No", () => {
    sessionStorage.setItem("patientgeriatric", "false");
    modal.remove();
    resolveCallback();
  });
  
  modal.appendChild(yesButton);
  modal.appendChild(noButton);
  
  return modal;
}

function createModalButton(text, clickHandler) {
  const button = document.createElement("button");
  button.textContent = text;
  button.addEventListener("click", clickHandler);
  return button;
}

function clearPatientData() {
  sessionStorage.removeItem("patientweight");
  sessionStorage.removeItem("patientgeriatric");
}

function displayParameters() {
  const weight = parseFloat(sessionStorage.getItem("patientweight"));
  const mode = sessionStorage.getItem("patientmode");
  const isGeriatric = sessionStorage.getItem("patientgeriatric");
  
  // Reset medication contraindication classes
  resetContraindicationClasses();
  
  // Update UI based on patient parameters
  updatePatientModeUI(weight);
  updatePatientDisplay(weight, mode, isGeriatric);
  
  console.log(`Patient weight is stored as ${weight}kg, and mode is ${mode}. The patient is considered Geriatric: ${isGeriatric}.`);
}

function resetContraindicationClasses() {
  document.querySelectorAll(".medcontraid").forEach(element => {
    element.classList.remove("medcontraid");
  });
}

function updatePatientModeUI(weight) {
  // Respect the user's mode selection - don't auto-switch based on weight
  // Only update UI elements based on the already-set mode
  const mode = sessionStorage.getItem("patientmode");
  
  if (mode === "Paediatric" || mode === "Newborn") {
    document.getElementById("paed1").checked = true;
    document.getElementById("agebutton").style.display = "revert";
  } else if (mode === "Adult") {
    document.getElementById("adult1").checked = true;
    document.getElementById("agebutton").style.display = "none";
  }
  
  // Don't change the mode based on weight - that's now handled in weightcalc()
}

function updatePatientDisplay(weight, mode, isGeriatric) {
  // Format weight display
  const displayWeight = Number.isInteger(weight) ? weight : weight.toFixed(2);
  
  // Update mode display
  const modeElement = document.getElementById("mode");
  modeElement.innerHTML = isGeriatric === "true" ? "Geriatric" : mode;
  
  // Update weight display (removed APLS notice)
  const weightElement = document.getElementById("weight");
  weightElement.innerHTML = `${displayWeight}kg`;
  
  // Add or update paediatric formula notice
  updatePaediatricFormulaNotice(mode);
}

function updatePaediatricFormulaNotice(mode) {
  // Find the parent table (the one containing mode and weight rows)
  const weightElement = document.getElementById("weight");
  if (!weightElement) return;
  
  const parentTable = weightElement.closest('table');
  if (!parentTable) return;
  
  const tbody = parentTable.querySelector('tbody');
  if (!tbody) return;
  
  // Remove existing notice if it exists
  const existingNotice = document.getElementById("paed-formula-notice");
  if (existingNotice) {
    existingNotice.remove();
  }
  
  // Add notice for paediatric patients
  if (mode === "Paediatric" || mode === "Newborn") {
    const noticeRow = document.createElement("tr");
    noticeRow.id = "paed-formula-notice";
    noticeRow.style.backgroundColor = "#e8f4f8";
    noticeRow.style.color = "#2c5282";
    noticeRow.style.fontSize = "0.9em";
    
    const noticeCell = document.createElement("td");
    noticeCell.colSpan = "2";
    noticeCell.style.textAlign = "center";
    noticeCell.style.padding = "8px";
    noticeCell.style.fontStyle = "italic";
    noticeCell.innerHTML = "Using updated paediatric weight calculation formulas";
    
    noticeRow.appendChild(noticeCell);
    tbody.appendChild(noticeRow);
  }
}

function runCalc() {
  // Trigger the calculation panel (legacy requirement)
  triggerCalculationPanel();
  
  // Execute all medication calculations
  executeMedicationCalculations(MEDICATION_FUNCTIONS.calculate);
  
  console.log('All medication calculations have been executed successfully.');
}

function triggerCalculationPanel() {
  const calcPanel = document.getElementById('calcpanel');
  if (calcPanel) {
    calcPanel.click();
    setTimeout(() => calcPanel.click(), 1);
  }
}

function executeMedicationCalculations(functionNames) {
  functionNames.forEach(functionName => {
    try {
      if (typeof window[functionName] === 'function') {
        window[functionName]();
      } else {
        console.warn(`Function ${functionName} is not available`);
      }
    } catch (error) {
      console.error(`Error executing ${functionName}:`, error);
    }
  });
}

function clearCalc() {
  executeMedicationCalculations(MEDICATION_FUNCTIONS.clear);
  console.log('All medication calculations have been cleared successfully.');
}

function clearParameters() {
  // Clear session storage
  sessionStorage.removeItem("patientweight");
  sessionStorage.removeItem("patientmode");
  sessionStorage.removeItem("patientgeriatric");
  
  console.log('Patient weight and mode have been cleared from Session Storage.');
  
  // Reset UI elements
  resetContraindicationClasses();
  resetUIElements();
  
  // Remove paediatric formula notice
  const existingNotice = document.getElementById("paed-formula-notice");
  if (existingNotice) {
    existingNotice.remove();
  }
  
  console.log('Patient parameters have been cleared from page.');
}

function resetUIElements() {
  const elements = {
    ageChoice: document.getElementById("agechoice"),
    weightInput: document.getElementById("weightinput"),
    mode: document.getElementById("mode"),
    weight: document.getElementById("weight")
  };
  
  if (elements.ageChoice) elements.ageChoice.selectedIndex = 0;
  if (elements.weightInput) elements.weightInput.value = "";
  if (elements.mode) elements.mode.innerHTML = "";
  if (elements.weight) elements.weight.innerHTML = "";
}