/************
 Use

.box {
  &.arrow-top-left {@include arrow('top','left', 10px, #4fade3)}
  &.arrow-top-right {@include arrow('top','right', 10px, #4fade3)}
  &.arrow-top-center {@include arrow('top','center', 10px, #4fade3)}
  &.arrow-bottom-left {@include arrow('bottom','left', 10px, #4fade3)}
  &.arrow-bottom-right {@include arrow('bottom','right', 10px, #4fade3)}
  &.arrow-bottom-center {@include arrow('bottom','center', 10px, #4fade3)}
  &.arrow-left-top {@include arrow('left','top', 10px, #4fade3)}
  &.arrow-left-center {@include arrow('left','center', 10px, #4fade3)}
  &.arrow-left-bottom {@include arrow('left','bottom', 10px, #4fade3)}
  &.arrow-right-top {@include arrow('right','top', 10px, #4fade3)}
  &.arrow-right-center {@include arrow('right','center', 10px, #4fade3)}
  &.arrow-right-bottom {@include arrow('right','bottom', 10px, #4fade3)}
}


.box-with-border {
  &.arrow-top-left {@include arrow('top','left', 10px, #eee, #4fade3, 6px)}
  &.arrow-top-right {@include arrow('top','right', 10px, #eee, #4fade3, 6px)}
  &.arrow-top-center {@include arrow('top','center', 10px, #eee, #4fade3, 6px)}
  &.arrow-bottom-left {@include arrow('bottom','left', 10px, #eee, #4fade3, 6px)}
  &.arrow-bottom-right {@include arrow('bottom','right', 10px, #eee, #4fade3, 6px)}
  &.arrow-bottom-center {@include arrow('bottom','center', 10px, #eee, #4fade3, 6px)}
  &.arrow-left-top {@include arrow('left','top', 10px, #eee, #4fade3, 6px)}
  &.arrow-left-center {@include arrow('left','center', 10px, #eee, #4fade3, 6px)}
  &.arrow-left-bottom {@include arrow('left','bottom', 10px, #eee, #4fade3, 6px)}
  &.arrow-right-top {@include arrow('right','top', 10px, #eee, #4fade3, 6px)}
  &.arrow-right-center {@include arrow('right','center', 10px, #eee, #4fade3, 6px)}
  &.arrow-right-bottom {@include arrow('right','bottom', 10px, #eee, #4fade3, 6px)}
}


************/

/* usage example
.div {  
  &:after {
    @include wf-icon (icon, font-size, color);
    display:block;
    width:50px;
    height:50px;    
  }
}

*/

ul.nav.navbar-nav {
	-webkit-touch-callout: none;
	/* iOS Safari */
	-webkit-user-select: none;
	/* Safari */
	-khtml-user-select: none;
	/* Konqueror HTML */
	-moz-user-select: none;
	/* Old versions of Firefox */
	-ms-user-select: none;
	/* Internet Explorer/Edge */
	user-select: none;
	/* Non-prefixed version, currently
                                  supported by Chrome, Opera and Firefox */
}
.animated {
	animation-duration: 1s;
	animation-fill-mode: both;
}
@keyframes fadeInLeft {
	from {
		opacity: 0;
		transform: translate3d(-10%, 0, 0);
	}
	to {
		opacity: 1;
		transform: none;
	}
}
.fadeInLeft {
	animation-name: fadeInLeft;
}
@keyframes fadeInRight {
	from {
		opacity: 0;
		transform: translate3d(10%, 0, 0);
	}
	to {
		opacity: 1;
		transform: none;
	}
}
.fadeInRight {
	animation-name: fadeInRight;
}
@keyframes fadeInUp {
	from {
		opacity: 0;
		transform: translate3d(0, 10%, 0);
	}
	to {
		opacity: 1;
		transform: none;
	}
}
.fadeInUp {
	animation-name: fadeInUp;
}
.navbar-header {
	background: url("../../../../../images/default-source/site-images/header-bg.png");
	background-repeat: no-repeat;
	background-size: auto;
	display: -ms-flexbox;
	display: flex;
	-ms-flex-direction: row;
	flex-direction: row;
	-ms-flex-pack: start;
	justify-content: flex-start;
	position: relative;
	width: 100%;
}
@media (max-width: 1199.98px) {
	.navbar-header {
		background-position-x: 150%;
	}
}
@media (max-width: 991.98px) {
	.navbar-header {
		background-position-x: 100%;
	}
	.navbar-header .company-logo {
		display: none;
	}
}
@media (max-width: 767.98px) {
	.navbar-header {
		background-position-x: 80%;
	}
	.navbar-header .header__logo {
		height: 50px;
		width: auto;
	}
}
@media (max-width: 575.98px) {
	.navbar-header {
		background-position-x: 80%;
	}
}
.header__left, .header__right {
	max-height: 100px;
	padding: 15px 20px;
	position: relative;
}
.header__right {
	margin-left: auto;
}
@media (max-width: 991.98px) {
	.header__right {
		display: none;
	}
}
.company-logo, .header__logo {
	height: 100%;
	max-width: 200px;
}
.navbar {
	border: none;
}
@media (max-width: 991.98px) {
	.navbar {
		display: -ms-flexbox;
		display: flex;
		-ms-flex-wrap: wrap;
		flex-wrap: wrap;
		margin-right: -15px;
		margin-left: -15px;
	}
}
.navbar-nav {
	margin: 0;
	margin: initial;
}
.navbar-nav li .dropdown-menu {
	padding-top: 0;
}
.navbar-toggle {
	height: 40px;
	margin: auto 15px auto auto;
}
@media (min-width: 992px) {
	.navbar-toggle {
		display: none;
	}
}
.navbar-collapse {
	padding-left: 0;
	padding-right: 0;
	width: 100%;
}
@media (min-width: 992px) {
	.navbar-collapse .dropdown:hover>.desktop-toggle {
		background-color: #c8102e;
		color: #fff;
	}
	.navbar-collapse .dropdown:hover>.dropdown-menu {
		display: block;
	}
	.navbar-collapse .sub-dropdown {
		margin-left: 100%;
		top: 0;
	}
	.navbar-collapse .mobile-toggle, .navbar-collapse .dropdown-link {
		display: none;
	}
}
@media (max-width: 1199.98px) {
	.navbar-collapse .desktop-toggle {
		pointer-events: none;
		cursor: default;
	}
}
@media (max-width: 991.98px) {
	.navbar-collapse .desktop-toggle {
		display: none;
		pointer-events: none;
		cursor: default;
	}
	.navbar-collapse .mobile-toggle, .navbar-collapse .dropdown-link {
		display: inline-block;
	}
	.navbar-collapse .dropdown-link {
		-ms-flex: 1;
		flex: 1;
		background-color: #c8102e;
	}
	.navbar-collapse .mobile-toggle {
		border-left: 1px solid #ccc;
		-ms-flex: 0 0 13%;
		flex: 0 0 13%;
	}
	.navbar-collapse .mobile-toggle:hover, .navbar-collapse .mobile-toggle:focus, .navbar-collapse .mobile-toggle:active {
		background-color: #fff;
	}
	.navbar-collapse .mobile-toggle:hover {
		background-color: #c8102e !important;
	}
	.navbar-collapse .mobile-toggle:hover svg {
		fill: #fff !important;
	}
	.navbar-collapse li a {
		background-color: #c8102e;
		color: #fff !important;
	}
	.navbar-collapse .dropdown a, .navbar-collapse .dropdown-submenu a, .navbar-collapse .dropdown-menu a {
		padding: 10px 10px;
		border-bottom: 1px solid #ccc;
	}
	.navbar-collapse .dropdown-menu a {
		background-color: #fff;
		color: #333 !important;
	}
	.navbar-collapse .dropdown {
		display: -ms-flexbox;
		display: flex;
		-ms-flex-wrap: wrap;
		flex-wrap: wrap;
	}
	.navbar-collapse .dropdown:first {
		border-top: 1px solid #ccc;
	}
	.navbar-collapse .dropdown .mobile-toggle, .navbar-collapse .dropdown .mobile-toggle:active, .navbar-collapse .dropdown .mobile-toggle:focus {
		background-color: #fff;
	}
	.navbar-collapse .dropdown .mobile-toggle svg {
		fill: #fff;
	}
	.navbar-collapse .dropdown.open>.mobile-toggle {
		background-color: #c8102e;
	}
	.navbar-collapse .dropdown.open>.mobile-toggle svg {
		fill: #fff;
		-ms-transform: rotate(0);
		transform: rotate(0);
	}
	.navbar-collapse .dropdown .mobile-toggle {
		display: -ms-inline-flexbox;
		display: inline-flex;
		-ms-flex-pack: center;
		justify-content: center;
		-ms-flex-align: center;
		align-items: center;
	}
	.navbar-collapse .dropdown .mobile-toggle svg {
		-ms-transform: rotate(180deg);
		transform: rotate(180deg);
		transition: transform 0.3s;
		transition: transform 0.3s, -webkit-transform 0.3s;
		fill: #c8102e;
		height: 18px;
		width: 18px;
	}
	.navbar-collapse .dropdown-menu {
		-ms-flex: 0 0 100%;
		flex: 0 0 100%;
		padding-bottom: 0;
	}
	.navbar-collapse .dropdown-menu a:not(.mobile-toggle) {
		padding-left: 25px !important;
	}
	.navbar-collapse .dropdown .sub-dropdown a {
		padding-left: 50px !important;
	}
}
@media (min-width: 992px) {
	.navbar-header {
		float: left;
	}
	.navbar-collapse.in {
		overflow-y: visible;
	}
	.navbar-collapse.collapse {
		display: block;
		height: auto;
		padding-bottom: 0;
		overflow: visible;
	}
	.navbar-nav {
		float: left;
		margin: 0;
	}
	.navbar-nav>li {
		float: left;
	}
	.navbar-nav>li>a {
		padding-top: 15px;
		padding-bottom: 15px;
	}
}
.tablescroll {
	overflow-x: auto;
}
@media (prefers-color-scheme: dark) {
	body {
		background-color: #252625;
		color: #FFF;
	}
	.nav-pills {
		background-color: #f5f5f5;
	}
	.MatrixEMA, .MatrixEMR, .MatrixEAO, .MatrixEMT, .MatrixATO, .MatrixMedic, .MatrixAO {
		color: #333;
	}
	/*div.ccpsubmgmt {
		color: #333;
	}*/
	
	.contrabox {
		color: #333;
	}
	
	.sf-Long-text a {
		color: #fff;
		text-decoration: underline;
		font-style: italic;
	}
	
	a.btn {
		color: #c8102e;
		text-decoration: none;
		font-style: initial;
	}
	
	.skilllist {
		color: #FFF!important;
	}
	.skilllist:hover {
		font-weight: bold;
	}
	input {
		color: #252625;
	}
	button.panelctrlactive {
		color: #252625
	}
	/*.rxsubmgmt {
		color: #252625;
	}*/
	h3 button {
		color: #252625
	}
	tbody>td.matrixAO, tbody>td.matrixEMA {
		color: #252625 !important;
	}
	table {
		background-color: #fff !important;
		color: #333;
	}
	table a {
		color: #c8102e!important;
		text-decoration: none!important;
    		font-style: initial!important;
	}
  table td.parameterheading a {
    color: #FFF !important;
  }
	.pgtitle {
		background: #333;
		color: #fff;
	}
	.labelgreen {
		color: #333;
	}
	.labelred {
		color: #333;
	}
	.labelyellow {
		color: #333;
	}
	.labelgreylight {
		color: #333;
	}
	.labelpri {
		color: #333;
	}
	.labelint {
		color: #333;
	}
	.labelminigreen {
		color: #333
	}
	.labelminiyellow {
		color: #333
	}
	.labelminired {
		color: #333
	}
}
.medimage {
	display: block;
	margin-left: auto;
	margin-right: auto;
	max-width: 20%
}
.innervideo {
	display: block;
	margin-left: auto;
	margin-right: auto;
	max-width: 100%;
}
.sasaheader {
	padding: 5px 0px;
	background-color: #d7d8d6;
}
.redalert {
	background-color: #c8102e;
	color: #fff;
	text-align: center;
	font-weight: bold;
	padding: 5px;
}
@media print {
	.navbar {
		display: none;
	}
	.navbar-default {
		display: none;
	}
	.quickchart {
		display: none;
	}
	.switch {
		display: none;
	}
	.volunteer {
		display: block !important;
	}
	.paramedic {
		display: block !important;
	}
	.medimage {
		display: none;
	}
	a[href]:after {
		content: none !important;
	}
	.uwp {
		display: block !important;
	}
	.catoggle {
		display: none;
	}
}
/* Added MD 2021-12-10 */

.labelcovid {
	font-size: 20px;
	margin: auto;
	width: 100%;
	text-align: left;
	background-color: #F3CB2B!important;
	padding: 10px;
	color: #333!important;
	-webkit-print-color-adjust: exact;
	border: 4px solid #C8102E;
	border-bottom: 0;
}
.blockcovid {
	border: 4px solid #C8102E;
	padding-right: 10px;
}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */